#!/usr/bin/env python
# py-logger - YANG logger supports over 1024 bytes message.
from optparse import OptionParser
import sys
import syslog

priorities = {
    "EMERG" 	: syslog.LOG_EMERG,	# system is unusable
    "ALERT" 	: syslog.LOG_ALERT,	# action must be taken immediately
    "CRIT"	: syslog.LOG_CRIT,	# critical conditions
    "ERR"	: syslog.LOG_ERR,	# error conditions
    "WARNING"	: syslog.LOG_WARNING,	# warning conditions
    "NOTICE"	: syslog.LOG_NOTICE,	# normal but significant condition
    "INFO"	: syslog.LOG_INFO,	# informational
    "DEBUG"	: syslog.LOG_DEBUG,	# debug-level messages
    }

facilities = {
    "KERN"	: syslog.LOG_KERN,	# kernel messages
    "USER"	: syslog.LOG_USER,	# random user-level messages
    "MAIL"	: syslog.LOG_MAIL,	# mail system
    "DAEMON"	: syslog.LOG_DAEMON,	# system daemons
    "AUTH"	: syslog.LOG_AUTH,	# security/authorization messages
    "SYSLOG"	: syslog.LOG_SYSLOG,	# messages generated internally by syslogd
    "LPR"	: syslog.LOG_LPR,	# line printer subsystem
    "NEWS"	: syslog.LOG_NEWS,	# network news subsystem
    "UUCP"	: syslog.LOG_UUCP,	# UUCP subsystem
    "CRON"	: syslog.LOG_CRON,	# clock daemon
    "LOCAL0"	: syslog.LOG_LOCAL0,	# reserved for local use
    "LOCAL1"	: syslog.LOG_LOCAL1,	# reserved for local use
    "LOCAL2"	: syslog.LOG_LOCAL2,	# reserved for local use
    "LOCAL3"	: syslog.LOG_LOCAL3,	# reserved for local use
    "LOCAL4"	: syslog.LOG_LOCAL4,	# reserved for local use
    "LOCAL5"	: syslog.LOG_LOCAL5,	# reserved for local use
    "LOCAL6"	: syslog.LOG_LOCAL6,	# reserved for local use
    "LOCAL7"	: syslog.LOG_LOCAL7,	# reserved for local use
    }

if __name__ == '__main__':
    p = OptionParser(usage="%prog [options] [message ...]",
                     version="%prog 2015-12-04")
    p.add_option('-i', '--pid', action='store_true', default=False,
                 help="Log the process id of the logger process with each line.")
    p.add_option('-s', '--stderr', action='store_true', default=False,
                 help="Log the message to standard error, as well as the system log.")
    p.add_option('--debug', action='store_true', default=False,
                 help="for debug, debug messages output to stderr.")
    p.add_option('--facility', action='store', default="USER",
                 metavar="FACILITY", 
                 help="KERN, USER, MAIL, DAEMON, AUTH, LPR, NEWS, UUCP, CRON, LOCAL0 - LOCAL7. default %default")
    p.add_option('--priority', action='store', default="INFO",
                 metavar="PRIORITY",
                 help="EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO, DEBUG. default %default")
    p.add_option('-p', action='store',
                 metavar="FACILITY.PRIORITY",
                 help="Enter the message with the specified priority. The priority may be as a ``FACILITY.PRIORITY'' pair. For example, ``-p LOCAL3.INFO'' logs the message(s) as INFORMATIONAL priority in the LOCAL3 facility.")
    p.add_option('-t', '--tag', action='store',
                 metavar="TAG",
                 help="Mark every line in the log with the specified TAG.")
    opts, args = p.parse_args()

    if opts.p:
        if opts.facility != "USER" or opts.priority != "INFO":
            p.error("-p and ( --facility or --priority) are mutually exclusive")
        else:
            opts.facility, opts.priority = opts.p.split('.')
    
    if args :
         myargs = args
    else :
        myargs = sys.stdin
    
    if opts.facility in facilities :
        myfacility = facilities[ opts.facility ]
    else :
       print >> sys.stderr, "Facility Error :", opts.facility
       exit(1)

    if opts.debug :
        print >> sys.stderr, "Facility :", opts.facility, "(", str(myfacility) , ")"

    if opts.priority in priorities :
        mypriority = priorities[ opts.priority ]
    else :
        print >> sys.stderr, "Priority Error :", opts.priority
        exit(1)

    if opts.debug :
        print >> sys.stderr, "Priority :", opts.priority, "(", str(mypriority), ")"

    if opts.tag :
        mytag = opts.tag
    else:
        mytag = __file__

    mylogoption = 0
    if opts.stderr :
        mylogoption |= syslog.LOG_PERROR
    if opts.pid :
        mylogoption |= syslog.LOG_PID
            
    if sys.version_info > ( 2, 4, 3, 'final', 0) :
        syslog.openlog(mytag,
                       logoption=syslog.LOG_NDELAY|mylogoption,
                       facility=myfacility)
    else :
        syslog.openlog(mytag,
                       syslog.LOG_NDELAY|mylogoption,
                       myfacility)

    for message in myargs:
        syslog.syslog(mypriority, message)

    syslog.closelog()
    exit
