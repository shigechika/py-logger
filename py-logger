#!/usr/bin/env python
# send message to syslog over 1024 bytes
__version__ = '$Id: py-logger 275 2015-12-02 09:39:24Z shige $'

from optparse import OptionParser
import sys
import syslog

priorities = {
    "EMERG" 	: 0, # system is unusable
    "ALERT" 	: 1, # action must be taken immediately
    "CRIT"	: 2, # critical conditions
    "ERR"	: 3, # error conditions
    "WARNING"	: 4, # warning conditions
    "NOTICE"	: 5, # normal but significant condition
    "INFO"	: 6, # informational
    "DEBUG"	: 7  # debug-level messages
    }

facilities = {
    "KERN"	: (0<<3), # kernel messages
    "USER"	: (1<<3), # random user-level messages
    "MAIL"	: (2<<3), # mail system
    "DAEMON"	: (3<<3), # system daemons
    "AUTH"	: (4<<3), # security/authorization messages
    "SYSLOG"	: (5<<3), # messages generated internally by syslogd
    "LPR"	: (6<<3), # line printer subsystem
    "NEWS"	: (7<<3), # network news subsystem
    "UUCP"	: (8<<3), # UUCP subsystem
    "CRON"	: (9<<3), # clock daemon
    "AUTHPRIV"	: (10<<3), # security/authorization messages (private)
    "FTP"	: (11<<3), # ftp daemon
    "LOCAL0"	: (16<<3), # reserved for local use
    "LOCAL1"	: (17<<3), # reserved for local use
    "LOCAL2"	: (18<<3), # reserved for local use
    "LOCAL3"	: (19<<3), # reserved for local use
    "LOCAL4"	: (20<<3), # reserved for local use
    "LOCAL5"	: (21<<3), # reserved for local use
    "LOCAL6"	: (22<<3), # reserved for local use
    "LOCAL7"	: (23<<3), # reserved for local use
    }

if __name__ == '__main__':
    p = OptionParser(version="%s" %__version__)
    p.add_option('-d', '--debug', action='store_true', default=False,
                 help="for debug")
    p.add_option('-f', '--facility', action='store', default="USER",
                 metavar="FACILITY", 
                 help="KERN, USER, MAIL, DAEMON, AUTH, LPR, NEWS, UUCP, CRON, LOCAL0 - LOCAL7. default %default")
    p.add_option('-p', '--priority', action='store', default="INFO",
                 metavar="PRIORITY",
                 help="EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO, DEBUG. default %default")
    opts, args = p.parse_args()

if opts.facility in facilities :
    myfacility = facilities[ opts.facility ]
else :
   print >> sys.stderr, "Facility Error :", opts.facility
   exit(1)

if opts.debug :
    print >> sys.stderr, "Facility=", opts.facility, "(", str(myfacility) , ")"

if opts.priority in priorities :
    mypriority = priorities[ opts.priority ]
else :
    print >> sys.stderr, "Priority Error :", opts.priority
    exit(1)

if opts.debug :
    print >> sys.stderr, "Priority=", opts.priority, "(", str(mypriority), ")"

syslog.openlog(__file__,
               logoption=syslog.LOG_PID|syslog.LOG_NDELAY,
               facility=myfacility)

for message in sys.stdin:
    syslog.syslog(mypriority, message)

syslog.closelog()
exit(0)
