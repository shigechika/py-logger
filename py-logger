#!/usr/bin/env python
# py-logger - YANG logger supports over 1024 bytes message.
__version__ = '2015-12-03'
from optparse import OptionParser
import sys
import syslog

priorities = {
    "EMERG" 	: 0, # system is unusable
    "ALERT" 	: 1, # action must be taken immediately
    "CRIT"	: 2, # critical conditions
    "ERR"	: 3, # error conditions
    "WARNING"	: 4, # warning conditions
    "NOTICE"	: 5, # normal but significant condition
    "INFO"	: 6, # informational
    "DEBUG"	: 7  # debug-level messages
    }

facilities = {
    "KERN"	: (0<<3), # kernel messages
    "USER"	: (1<<3), # random user-level messages
    "MAIL"	: (2<<3), # mail system
    "DAEMON"	: (3<<3), # system daemons
    "AUTH"	: (4<<3), # security/authorization messages
    "SYSLOG"	: (5<<3), # messages generated internally by syslogd
    "LPR"	: (6<<3), # line printer subsystem
    "NEWS"	: (7<<3), # network news subsystem
    "UUCP"	: (8<<3), # UUCP subsystem
    "CRON"	: (9<<3), # clock daemon
    "AUTHPRIV"	: (10<<3), # security/authorization messages (private)
    "FTP"	: (11<<3), # ftp daemon
    "LOCAL0"	: (16<<3), # reserved for local use
    "LOCAL1"	: (17<<3), # reserved for local use
    "LOCAL2"	: (18<<3), # reserved for local use
    "LOCAL3"	: (19<<3), # reserved for local use
    "LOCAL4"	: (20<<3), # reserved for local use
    "LOCAL5"	: (21<<3), # reserved for local use
    "LOCAL6"	: (22<<3), # reserved for local use
    "LOCAL7"	: (23<<3), # reserved for local use
    }

if __name__ == '__main__':
    usage = "%prog [options] [message ...]"
    version = "%prog " + __version__
    p = OptionParser(usage=usage,
                     version=version)
    p.add_option('--debug', action='store_true', default=False,
                 help="for debug, debug messages output to stderr.")
    p.add_option('--facility', action='store', default="USER",
                 metavar="FACILITY", 
                 help="KERN, USER, MAIL, DAEMON, AUTH, LPR, NEWS, UUCP, CRON, LOCAL0 - LOCAL7. default %default")
    p.add_option('--priority', action='store', default="INFO",
                 metavar="PRIORITY",
                 help="EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO, DEBUG. default %default")
    p.add_option('-s', '--stderr', action='store_true', default=False,
                 help="Log the message to standard error, as well as the system log.")
    p.add_option('-t', '--tag', action='store',
                 metavar="TAG",
                 help="Mark every line in the log with the specified TAG.")
    opts, args = p.parse_args()

    if args :
         myargs = args
    else :
        myargs = sys.stdin
    
    if opts.facility in facilities :
        myfacility = facilities[ opts.facility ]
    else :
       print >> sys.stderr, "Facility Error :", opts.facility
       exit(1)

    if opts.debug :
        print >> sys.stderr, "Facility :", opts.facility, "(", str(myfacility) , ")"

    if opts.priority in priorities :
        mypriority = priorities[ opts.priority ]
    else :
        print >> sys.stderr, "Priority Error :", opts.priority
        exit(1)

    if opts.debug :
        print >> sys.stderr, "Priority :", opts.priority, "(", str(mypriority), ")"

    if opts.tag :
        mytag = opts.tag
    else:
        mytag = __file__

    if opts.stderr :
        mylogoption = syslog.LOG_PERROR
    else:
        mylogoption = 0
            
    if sys.version_info > ( 2, 4, 3, 'final', 0) :
        syslog.openlog(mytag,
                       logoption=syslog.LOG_NDELAY|mylogoption,
                       facility=myfacility)
    else :
        syslog.openlog(mytag,
                       syslog.LOG_NDELAY|mylogoption,
                       myfacility)

    for message in myargs:
        syslog.syslog(mypriority, message)

    syslog.closelog()
    exit
